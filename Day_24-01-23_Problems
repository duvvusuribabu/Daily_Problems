1)// Inorder Trees

class Solution {
    ArrayList<Integer> list = new ArrayList<>();
    public List<Integer> inorderTraversal(TreeNode root) {
        if(root==null)
          return list;
        inorderTraversal(root.left);
        list.add(root.val);
        inorderTraversal(root.right);

        return list;  
    }
}

2)// Preorder Trees

class Solution {
     ArrayList<Integer> list = new ArrayList<>();
    public List<Integer> preorderTraversal(TreeNode root) {
     if(root==null)
     return list;
     list.add(root.val);
        preorderTraversal(root.left);  
        preorderTraversal(root.right);   

       return list; 

    }
}
//3)Postorder
class Solution {
    ArrayList<Integer> list =new ArrayList<>();
    public List<Integer> postorderTraversal(TreeNode root) {
      if(root==null)
      return list;
      postorderTraversal(root.left);
      postorderTraversal(root.right);
      list.add(root.val);

      return list;  
    }
}

//4) Same tree





